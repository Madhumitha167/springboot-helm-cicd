pipeline {
    agent any
    tools{
        jdk 'jdk17'
        maven 'maven3'
    }
    environment {
    awsRegion = "us-east-1"
    eksClusterName = "democluster"
    }
    stages{
        stage("Checkout"){
            steps{
                git branch: 'master', url: 'https://github.com/Madhumitha167/springboot-helm-cicd.git'
            }
        }
        stage("Compile"){
            steps{
                sh "mvn clean compile"
            }
        }
        stage("Test"){
            steps{
                sh "mvn test"
            }
        }
        stage("Sonarqube analysis"){
            environment{
                SONAR_URL = "http://54.237.2.69:9000/"
            }
            steps{
               withCredentials([string(credentialsId:'sonar-token', variable: 'SONAR_TOKEN')]){
                 sh "mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=${SONAR_URL}"
            }
            }
        }
        stage("Build"){
            steps{
                  sh "mvn clean install"
            }
        }
        stage("OWASP Dependency Check"){
            steps{
               dependencyCheck additionalArguments: '--scan ./ ' , odcInstallation: 'dp-check'
               dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Build and push docker images"){
            steps{
                script{
                  withDockerRegistry(credentialsId: 'docker-credentials', toolName: 'docker') {
                     sh "docker build -t springboot ." 
                     sh "docker tag springboot madhu1607/newspringbootapp:latest "
                     sh "docker push madhu1607/newspringbootapp:latest"
                    }  
                }
            }
        }
        stage ('Helm Deploy') {
          steps {
            script {
                sh "aws eks --region $awsRegion update-kubeconfig --name $eksClusterName"
                sh "helm upgrade finalrelease --install chart1 --namespace helm"
                }
            }
        }
             
    }
}

        }
        
    }
}
